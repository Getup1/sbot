// –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
require('http').createServer().listen(3000)
import Discord from "discord.js"
export const client = new Discord.Client()

// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–µ–π —Å—Ä–µ–¥—ã
require('dotenv').config()
const TOKEN = process.env.BOT_TOKEN
export const OWNER_ID = process.env.OWNER_ID

if (!(TOKEN && OWNER_ID)) {
	console.log("Can't get some env variable!")
	console.log("TOKEN: " + (TOKEN ? TOKEN.substring(0, 10) + "..." : "not found"))
	console.log({OWNER_ID})
}

export const readyTime = Date.now()
export const dateOptions = {
	weekday: "long",
	year: "numeric",
	month: "short",
	day: "numeric",
	hour: "2-digit",
	minute: "2-digit",
	second: "2-digit",
	hour12: false,
	timeZone: "Europe/Moscow"
}
export let BOT_ID

import * as s from "./secondary"
import * as c from "./commands"
import {commandsRegExp, simpleAnswers} from "./aliases"

let visibleServers = []
export let requestsCounter = 0

// —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
function processMessage(msg) {
	// –µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ –ª—Å –∫–∞—Ä—Ç–∏–Ω–∫—É-–∞—Ç—Ç–∞—á–º–µ–Ω—Ç
	let isSentImageHere = false
	if (msg.channel.type == "dm") {
		msg.attachments.forEach(att => {
			c.Send(msg, null, `send ${att.url} ${msg.content}`)
			isSentImageHere = true
		})
	}
	if (isSentImageHere) {
		return
	}

	// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	let msgoc = msg.content.replace(/\n/g, " ").replace(/ +/g, " ")
	let msglc = msgoc.toLowerCase().replace(/—ë/g, "–µ")
	let msgCommandOriginal
	let msgCommand
	let msglcDivided

	// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã
	if (msglcDivided = msglc.match(new RegExp("^(?:[—Åc][–±b6]|—Å–±–æ—Ç|—Å—Ç–∏–ª–ª?–±–æ—Ç|sb|sbot|still?bot|<@" + BOT_ID + ">)" + ",? (.+)$"))) {
		msgCommandOriginal = msgoc.match(/^\S+ (.+)$/)[1]
		msgCommand = msglcDivided[1]
	} else if (msg.channel.type != "text") {
		msgCommandOriginal = msgoc
		msgCommand = msglc
	} else {
		return
	}

	// only allowed RC channels!
	/*
	if (msg.channel.type == "text" && msg.channel.guild.id == "110107304413638656" && !(["519609441109147655","521683316899053596","334369998866874369", "541594001992581122"].includes(msg.channel.id))) {
		 return
	}
	*/

	// –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...
	requestsCounter++

	// –æ—Ç–æ—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –ª–æ–≥–∏
	let serverWhereUserIs = "Direct Messages"
	if (msg.channel.type == "text") {
		serverWhereUserIs = (msg.channel.guild.name + " (" + msg.channel.guild.id + ")")
	}
	console.log((new Date).toLocaleString("ru", dateOptions) + "\nFrom " + serverWhereUserIs + ":\n" + msg.author.id + " | " + msg.author.tag + ": " + msg.content)

	// –ø–æ–¥–µ–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ "–æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É" –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	let args = msgCommand.split(" ")
	let cmd = args.shift()

	// –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ä–µ–≥—É–ª—è—Ä–∫–∞—Ö
	for (let i of commandsRegExp) {
		if (cmd.match(i.r)) {
			i.f(msg, args, msgCommandOriginal)
			return
		}
	}

	// "–æ–±—â–µ–Ω–∏–µ"
	for (let i of simpleAnswers) {
		if (msgCommand.match(i.r)) {
			if (i.e) {
				msg.react(i.e)
			} else if (i.t) {
				msg.channel.send(s.getRandomElem(i.t))
			}
			return
		}
	}

	// –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—é
	args.unshift(cmd)
	s.autoreact(msg, args, true)
}
function actionsForReactions(messageReaction, user, wasReactionAdded) {
	let msg = messageReaction.message
	let msgReaction = messageReaction.emoji.name

	if (["üìΩ", "‚õ©", "üéÆ"].includes(msgReaction) && msg.id == "565292786514133012") {
		s.setCinemaRole(user, wasReactionAdded, msgReaction)
	} else if (msg.content.startsWith("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ–¥–∂–∏:") && ["‚¨Ö", "‚û°"].includes(msgReaction)) {
		s.checkEmojiListReaction(msgReaction, user, msg, visibleServers)
	} else {
		s.checkHomestuckReaction(messageReaction, user)
	}
}

// –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
client.on('ready', () => {

	let readyTimeString = new Date(readyTime).toLocaleString("ru", dateOptions)
	console.log(client.user.tag + " entered Discord on " + readyTimeString)

	client.user.setPresence({game: {name: "sb help", type: 0}})
	BOT_ID = client.user.id

	// –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ —Å–±–æ—Ä –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
	client.guilds.forEach(guild => {
		if (guild.emojis.size) {
			visibleServers.push(guild.id)
		}
		guild.channels.forEach(channel => {
			if (channel.type == "text") {
				if (channel.permissionsFor(client.user).has("READ_MESSAGES")) {
					channel.fetchMessages({limit: 5})
						.then(() => {})
						.catch(error => console.log(error))
				}
			}
		})
	})

	// –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞
	let cinema = client.channels.get("541594001992581122")
	if (cinema) {
		cinema.fetchMessage("542389154424553549")
			.then(() => {})
			.catch(error => console.log(error))
	}

})
client.on('message', msg => {
	if (msg.author.id == BOT_ID) return
	// processMessage(msg)
	setTimeout(processMessage, 50, msg)
})
client.on('messageReactionAdd', (messageReaction, user) => {
	let msg = messageReaction.message
	let msgReaction = messageReaction.emoji.name

	if (s.checkReactionForAutoreact(messageReaction, user)) {
		return
	} else if (msgReaction == "‚ùå" && [BOT_ID, OWNER_ID].includes(msg.author.id) && user.id == OWNER_ID) {
		if (msg.channel.id != "526441608250392577") {
			msg.delete(300)
		}
	} else {
		actionsForReactions(messageReaction, user, true)
	}
})
client.on('messageReactionRemove', (messageReaction, user) => {
	actionsForReactions(messageReaction, user, false)
})
client.on('guildCreate', (guild) => {
	if (guild.emojis.size) {
		visibleServers.push(guild.id)
	}
})
client.on('guildDelete', (guild) => {
	let index = visibleServers.indexOf(guild.id)
	if (index) {
		visibleServers.splice(index, 1)
	}
})

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –î–∏—Å–∫–æ—Ä–¥—É
function login() {
    client.login(TOKEN).catch(() => setTimeout(login, 5000))
}
login()
