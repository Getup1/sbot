import * as s from "./secondary";
import {client, readyTime, ownerID, botID} from "./bot";

const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
const Cheerio = require('cheerio');

import {translatedTags} from "./aliases";

const helpLines = [
	"–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –°—Ç–∏–ª–ª–ë–æ—Ç.",
	"–ß—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ, –æ–±—Ä–∞—Ç–∏—Å—å –∫–æ –º–Ω–µ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É.",
	"–ù–∞–ø—Ä–∏–º–µ—Ä: `—Å–±–æ—Ç –ø–∏–∫—á–∞ –∫—Ä–µ–∞—Ç–∏–≤ –Ω–∞–º–∏—è`",
	"–í –ª—Å –º–æ–∂–Ω–æ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è: `–ø–∏–∫—á–∞ –∫—Ä–µ–∞—Ç–∏–≤ –Ω–∞–º–∏—è`",
	"*–°–∫–æ–±–∫–∏ `<>[]` –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ (–æ–Ω–∏ –æ–∑–Ω–∞—á–∞—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –Ω–µ –æ—á–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã).*",
	"",
	"`—Ä <–Ω–∞–∑–≤–∞–Ω–∏–µ_—ç–º–æ–¥–∂–∏>`",
	"\t ‚Äì –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π: `—ç–º–æ–¥–∂–∏`.",
	"1. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª—Å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏.",
	"–ù–∞–ø—Ä–∏–º–µ—Ä: `pearlWink`",
	"–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–æ–π –∏–∑ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º –∫–æ–º–∞–Ω–¥—É `p`.",
	"2. –ü–æ—Å—Ç–∞–≤—å –ª—é–±—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
	"3. –ì–æ—Ç–æ–≤–æ, —è –ø–æ—Å—Ç–∞–≤–∏–ª —ç–º–æ–¥–∂–∏, —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å —Ç—ã–∫–Ω—É—Ç—å –Ω–∞ –Ω–µ–≥–æ —Å–∞–º–æ–º—É.",
	"–í —Å–ª—É—á–∞–µ –ø—É—Ç–∞–Ω–∏—Ü—ã –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.",
	"–ù–∞–ø—Ä–∏–º–µ—Ä: `pearlWink:still_testing` *(–ø—Ä–æ–±–µ–ª—ã –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ `_`)*",
	"",
	"`–∏–Ω–≤–∞–π—Ç`",
	"\t‚Äì –ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä.",
	"`–ø–∏–∫—á–∞ [—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª]`",
	"\t‚Äì —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –ì–∞–ª–µ—Ä–µ–∏.",
	"`–æ—Ç–ø—Ä–∞–≤—å <—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞—Ä—Ç–∏–Ω–∫—É> <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>`",
	"\t‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ì–∞–ª–µ—Ä–µ—é.",
	"\t–ù–∞–ø—Ä–∏–º–µ—Ä: `–æ—Ç–ø—Ä–∞–≤—å https://i.imgur.com/NnFA0Pz.png –•—Ä–∞–º –î—É—Ö–∞ –ñ–µ–ª–µ–∑–Ω–æ–π –î–≤–µ—Ä–∏, 2014-07-14, —Å–∏–Ω–≥–ª–ø–ª–µ–µ—Ä`",
	"\t–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–µ –≤ –õ–°, –ø—Ä–∏ —ç—Ç–æ–º —Å–ª–æ–≤–æ `–æ—Ç–ø—Ä–∞–≤—å` –Ω–µ –Ω—É–∂–Ω–æ.",
	"`—Ö–æ—É–º—Å—Ç–∞–∫ [–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã]`",
	"\t‚Äì –ø–æ—á–∏—Ç–∞—Ç—å –•–°."
];
const helpText = helpLines.join("\n");

export function Help(msg) {
	msg.author.send(helpText)
		.then(() => {
			s.envelope(msg);
		})
		.catch(error => console.log(error));
}
export function Ping(msg) {
	let pongText = "üèì –ü–æ–Ω–≥!";
	msg.channel.send(pongText)
		.then((pong) => {
			let userTime = msg.createdTimestamp / 1000;
			let botTime = pong.createdTimestamp / 1000;
			let pongTime = (botTime - userTime).toFixed(3);
			pong.edit(pongText + " " + pongTime + " —Å–µ–∫.");
		})
		.catch(error => console.log(error));
}
export function Img(msg, args) {
	// do not spam by pictures
	if (!s.isThisBotsChannel(msg) && msg.channel.id != "519609441109147655") {
		msg.react("ü§ñ");
		return;
	}

	var typeOfImage = ".png";

	for (var i = 0; i < args.length; i++) {
		for (var key in translatedTags) {
			if (args[i] == "gif") typeOfImage = ".gif";

			if (args[i].match(/^[!]/)) {
				args[i] = "-" + args[i].substr(1);
			}

			if (args[i].match(new RegExp("^(" + translatedTags[key] + ")[.!,]?$"))) {
				args[i] = key;
				break;
			} else if (args[i].match(new RegExp("^[-](" + translatedTags[key] + ")[.!,]?$"))) {
				args[i] = "-" + key;
				break;
			}
		}
	}

	var argsText = "";

	if (args.length > 0) {
		argsText = args.join(",");
		argsText = "?tags=" + encodeURIComponent(argsText);
	}

	var xhrImg = new XMLHttpRequest();
	xhrImg.open('GET', 'https://chaoscraft.ml/files/gallery/random/' + argsText);
	xhrImg.onreadystatechange = function () {
		if (this.readyState == 4 && this.status == 200) {
			var imageInfo = JSON.parse(this.responseText);
			if (!imageInfo.error) {
				msg.channel.send({
					embed: {
						color: 0x7486C2,
						author: {
							name: imageInfo.title,
							icon_url: "https://i.imgur.com/5EOhj0z.png",
							url: ("https://stilltest.tk/gallery/#" + imageInfo.id)
						},
						description: ("–¢–µ–≥–∏: " + imageInfo.tags.join(", ") + (imageInfo.date ? "\n–î–∞—Ç–∞: " + imageInfo.date : "")),
						image : {
							url : ("https://i.imgur.com/" + imageInfo.id + typeOfImage)
						}
					}
				});
			} else {
				msg.react("343057042862243840");
			}
		}
	}
	xhrImg.send(null);
}
export function Tags(msg, args) {
	if (args[0]) {
		return;
	}

	var tags = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n\n";
	for (var key in translatedTags) {
		tags += ("`" + key + "` ");
	}
	msg.author.send(tags)
		.then(() => {
			s.envelope(msg);
		})
		.catch(error => console.log(error));
}
export function Send(msg, args, msgCommandOriginal, discordLink, imageID, imageDate) {
	if (!discordLink) discordLink = "";
	if (!imageID) imageID = "";
	if (!imageDate) imageDate = "";

	var imageParamsArray = msgCommandOriginal.match(/\S+ (\S+) ([\s\S]+)/);

	if (!imageParamsArray) {
		msg.react("üìú");
		msg.channel.send("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–π –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ.");
		return;
	}

	var imageLink = imageParamsArray[1];

	var tagsSplit = imageParamsArray[2].split(/(?:tags|—Ç[–µ–∞—ç]–≥–∏):/i, 2);
	var imageTitle = tagsSplit[0].replace(/\s+$/g, "");

	var imageTags = [];
	if (tagsSplit[1]) {
		imageTags = tagsSplit[1].toLowerCase().replace(/^\s+/g, "").split(/[,;\s]+/);
	}
	imageTags.unshift("screenshot", "minecraft");
	var imageTagsText = "";
	for (var i in imageTags) {
		imageTagsText += '\"' + imageTags[i] + '\", ';
	}
	if (imageTagsText) {	
		imageTagsText = imageTagsText.slice(0, -2);
	}

	var imageJSON = '```json\n\t"' + imageID + '": {\n\t\t"title": "' + imageTitle + '",\n\t\t"date": "' + imageDate + '",\n\t\t"takenBy": "' + msg.author.username + '",\n\t\t"big": true,\n\t\t"tags": ['+ imageTagsText +']\n\t},\n```';

	client.channels.get("526441608250392577").send("–û—Ç " + msg.author.tag + ":\n" + "<" + discordLink + ">\n" + imageLink + "\n" + imageJSON)
		.then(() => {
			msg.react("üìÆ");
		})
		.catch(error => console.log(error));
}
export function React(msg, args) {
	s.autoreact(msg, args, false); // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∫ –Ω–µ–π –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
}
export function EmojiList(msg, args) {
	if (args[0]) {
		return;
	}

	msg.author.send("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ–¥–∂–∏:")
		.then(() => {
			s.envelope(msg);
		})
		.catch(error => console.log(error));
	let sendingTimer = 800;
	client.guilds.forEach(key => {
		if (key.emojis.size) {
			let emojis = "";
			emojis += (key.name + " (`" + key.id + "`):\n");
			let emojiList = [];
			key.emojis.forEach(key => {
					if (key.animated) {
				emojiList.push("<a:" + key.name + ":" + key.id + ">`" + key.name + "`");
					} else {
				emojiList.push("<:" + key.name + ":" + key.id + ">`" + key.name + "`");
					}
			});
			emojis += emojiList.join(", ");
			setTimeout(() => {msg.author.send(emojis, {split: {char: " ", append: "‚¨õ‚¨õ‚¨õ\n"}});}, sendingTimer);
			sendingTimer += 800;
		}
	});
	return;
}
export function Sticker(msg, args) {
	// do not spam by pictures
	if (!s.isThisBotsChannel(msg)) {
		msg.react("ü§ñ");
		return;
	}

	if (!args[0]) {
		msg.react("üìú");
		return;
	}

	var emoji;

	if (args[0].match(/^\d+$/g)) {
		if (client.emojis.get(args[0])) {
			emoji = client.emojis.get(args[0]);
			s.sendEmojiLinkEmbed(msg, emoji);
			s.deleteUserMessage(msg);
			return;
		}
	}

	var emojiName = s.getEmojiName(args[0]);

	var guildName;
	var guildCheck;

	if (guildCheck = emojiName.match(/^([^:]+)(?::(\S+))$/)) {
		emojiName = guildCheck[1];
		guildName = guildCheck[2];
	}

	emoji = s.findEmoji(emojiName, guildName, msg.channel);

	if (!emoji) {
		msg.react("343057042862243840");
		return;
	}

	s.sendEmojiLinkEmbed(msg, emoji);
}
export function Servers(msg) {
	if (msg.author.id != ownerID) {
		return;
	}
	var servers = "–ì–¥–µ –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏:\n";
	client.guilds.forEach(key => {
		servers += ("\n" + key.name + " (`" + key.id + "`)");
	});
	msg.author.send(servers, {split: {char: "\n"}})
		.then(() => {
			s.envelope(msg);
		})
		.catch(error => console.log(error));
}
export function Avatar(msg, args, msgCommandOriginal) {
	// do not spam by pictures
	if (!s.isThisBotsChannel(msg)) {
		msg.react("ü§ñ");
		return;
	}
	var user;
	if (args[0]) {
		user = s.findUserToGetAvatar(s.getSimpleString(msgCommandOriginal.match(/\S+ (.+)/)[1]));
		if (user) {
			if (user.avatar) {
				s.sendUserAvatarEmbed(msg, user);
			}
		} else {
			msg.react("343057042862243840");
		}
	} else {
		user = msg.author;
		s.sendUserAvatarEmbed(msg, user);
	}
}
export function Invite(msg) {
	msg.author.send("–¢—ã –º–æ–∂–µ—à—å –ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏: \nhttps://discordapp.com/api/oauth2/authorize?client_id=" + botID + "&scope=bot&permissions=0")
		.then(() => {
			s.envelope(msg);
		})
		.catch(error => console.log(error));
}
export function Uptime(msg) {

	let diff = Date.now() - readyTime;
	let tarr = [1000, 60, 60, 24];
	for (let i in tarr) {
		let x = tarr[i];
		tarr[i] = diff % x;
		diff = (diff - tarr[i]) / x;
	}
	tarr.push(diff);
	tarr.shift();
	let warr = [
		['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
		['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
		['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
		['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'],
	];
	let sarr = [];
	for (let i = tarr.length - 1; i >= 0; i--) {
		if (!tarr[i]) {
			continue;
		}
		sarr.push(tarr[i] + ' ' + s.pluralize(tarr[i], warr[i]));
	}

	msg.channel.send("–Ø —Ä–∞–±–æ—Ç–∞—é —É–∂–µ " + sarr.join(', ') + '.');
}
export function Homestuck(msg, args, msgCommandOriginal, usedArrowButton) {
	if (!s.isThisBotsChannel(msg)) {
		msg.react("ü§ñ");
		return;
	}

	let page_number;

	if (args[0]) {
		if (Number(args[0]) >= 1 && Number(args[0]) <= 8130) {
			page_number = args[0];
		} else {
			return;
		}
	} else {
		page_number = 1;
	}

	let page_link = 'https://www.homestuck.com/story/' + page_number;
  let comic_title_empty = "hs#" + page_number;
  let got_error_already = false;
	let embed_color = 0x249E28;

	let comic_embed = {
		color: embed_color,
		author: {
			url: page_link,
			name: comic_title_empty
		}
	}

  let xhrHS = new XMLHttpRequest();
  xhrHS.open('GET', page_link);
  xhrHS.setRequestHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0");

  xhrHS.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      let $ = Cheerio.load(this.responseText);

      let content_container = $('div#content_container');
      let flash_div = $('div#o_flash-container');


      // detecting video
      let is_there_video = false;
      let yt_link = "";
      let yt_link_code;

      if (flash_div.length) {
        let yt_raw = flash_div.html().match(/\'youtubeid\', \'(.+)\'/);
        if (yt_raw) {
          yt_link_code = yt_raw[1];
        }
      } else {
        let yt_raw = $('iframe.ar-inner').attr('src');
        if (yt_raw) {
          yt_link_code = yt_raw.match(/embed\/(.+)/)[1];
        }
      }
      if (yt_link_code) {
        yt_link = "https://youtu.be/" + yt_link_code;
        is_there_video = true;
      }


      if (is_there_video) {
        // send title, desc and video link
        s.showHomestuckPage(msg, {}, usedArrowButton, comic_title_empty + "\n" + yt_link);
      } else {

				// getting title
	      let comic_title = $('h2.type-hs-header').text();
	      if (comic_title && !is_there_video) {
	        comic_title = comic_title + " (hs#" + page_number + ")";
	      } else {
	        comic_title = comic_title_empty;
	      }
				comic_embed.author.name = comic_title;

	      // getting description
	      let desc = $('p.type-rg').text().replace(/\ +/g, " ").replace(/^\s+/, "").replace(/\s+$/, "");
	      let desc_limit = 2047;
	      if (desc.length > desc_limit) {
	        desc = desc.substring(0, desc_limit) + "‚Ä¶";
	      } else if (desc.length == 0) {
	        desc = "";
	      }
				comic_embed.description = desc;

        // getting images
        let imgs;
        let img_link = "";
        let is_img_from_flash = false;
        if (content_container.length) {
          imgs = content_container.find('img.mar-x-auto.disp-bl');
          if (!imgs.length) {
            let imgs_raw = $('div.bg-scratch-mid-green.pad-t-lg').find('img');
            if (imgs_raw.length) {
              imgs = imgs_raw.attr('src');
              is_img_from_flash = true;
            }
          }
        } else {
          imgs = $('img.mar-x-auto.disp-bl');
        }
        if (flash_div.length && !imgs.length) {
          let imgs_raw = flash_div.html().match(/\'altimgsrc\', \'(.+)\'/);
          if (imgs_raw) {
            imgs = imgs_raw[1];
            is_img_from_flash = true;
          }
        }
        if (imgs.length) {
          // send title, image and desc
          if (is_img_from_flash) {
            img_link = "https://www.homestuck.com" + imgs;
					} else if (imgs.attr('src').startsWith("/")) {
						img_link = "https://www.homestuck.com" + imgs.attr('src');
          } else {
            img_link = imgs.attr('src');
          }

					comic_embed.image = {url: img_link};
        } else {
          // send title and footer
					comic_embed.footer = {text: "It's probably interactive."};
        }
				s.showHomestuckPage(msg, comic_embed, usedArrowButton, "");
      }
    } else if (this.status == 404 && !got_error_already) {
      // send title and footer
      got_error_already = true;
			comic_embed.footer = {text: "It's probably missing page."};
			s.showHomestuckPage(msg, comic_embed, usedArrowButton, "");
    }
  }
  xhrHS.send(null);
}
export function CinemaPing(msg) {
	if (![ownerID, "184388744558673920", "378318866524143627", "178833086530846720"].includes(msg.author.id)) {
		return;
	}

	let cinemaPing = "";
	client.channels.get("541594001992581122").fetchMessage("542389154424553549")
		.then((message) => {
			message.reactions.get("üìΩ").fetchUsers()
				.then((users) => {
					users.forEach(user => {
						cinemaPing += "<@" + user.id + ">\n";
					});
					cinemaPing += "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–µ–∞–Ω—Å!";
					msg.channel.send(cinemaPing);
				})
				.catch(error => console.log(error));
		})
		.catch(error => console.log(error));
}
export function SnowflakeTime(msg, args) {
	let totalSFTimes = "";
	args.forEach(arg => {
		if (arg.match(/\d{17,20}/)) {
			let totalMatches = arg.match(/\d{17,20}/g);
			for (let i in totalMatches) {
				totalSFTimes += s.dateStr(s.sfTime(Number(totalMatches[i]))) + "\n";
			}
		}
	});
	if (totalSFTimes) {
		msg.channel.send(totalSFTimes);
	}
}