import * as s from "./secondary"
import {client, readyTime, OWNER_ID, BOT_ID, requestsCounter, visibleServers} from "./bot"
import {imgDatabaseURL} from "./config"

import got from "got"
import Cheerio from "cheerio"
import Intl from "intl"
import jimp from "jimp"
import skmeans from "skmeans"

export const commands = {
	Help: {
		r: /^(—Ä—É–¥–∑|—Ö[–µ—ç]–ª–ø|–ø–æ–º–æ(—â—å|–≥–∏)|–∫–æ–º–∞–Ω–¥—ã|help|comm?ands?)[.!]?$/,
		v: true,
		f (msg) {
			const helpLines = [
				"–ß—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ, –æ–±—Ä–∞—Ç–∏—Å—å –∫–æ –º–Ω–µ –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É.",
				"–ù–∞–ø—Ä–∏–º–µ—Ä: `—Å–±–æ—Ç –∏–º–≥ –∫—Ä–µ–∞—Ç–∏–≤ –Ω–∞–º–∏—è` (–≤ –ª—Å –º–æ–∂–Ω–æ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è)",
				`–ü—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ –ø–æ [—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ](https://discordapp.com/api/oauth2/authorize?client_id=${BOT_ID}&scope=bot&permissions=0).`
			]
			const helpEmbed = {
				color: 0x7486C2,
				title: "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –°—Ç–∏–ª–ª–ë–æ—Ç <:tuturuMetal:601419582837751810>",
				description: helpLines.join("\n"),
				fields: [
					{
						name: "<–Ω–∞–∑–≤–∞–Ω–∏–µ_—ç–º–æ–¥–∂–∏>",
						value: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –ª—é–±–æ–π —ç–º–æ–¥–∂–∏. –ß–µ—Ä–µ–∑ –∑–Ω–∞–∫ `:` –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, —Å –∫–∞–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –µ–≥–æ –±—Ä–∞—Ç—å. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π - `—ç–º–æ–¥–∂–∏`"
					},
					{
						name: "–∏–º–≥ [—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª]",
						value: "–†–∞–Ω–¥–æ–º–Ω–∞—è –ø–∏–∫—á–∞ –∏–∑ [–ì–∞–ª–µ—Ä–µ–∏](https://stilltest.tk/gallery/)."
					},
					{
						name: "<–æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏–∫—á–∏> + –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
						value: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ì–∞–ª–µ—Ä–µ—é (—Ç–æ–ª—å–∫–æ –≤ –õ–°, [–ø—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è](https://i.imgur.com/kus289H.png)).\n–ï—Å–ª–∏ —è –ø–æ—Å—Ç–∞–≤–∏–ª –≤ –æ—Ç–≤–µ—Ç üìÆ, –∑–Ω–∞—á–∏—Ç, —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å."
					},
					{
						name: "—Ö–æ—É–º—Å—Ç–∞–∫ [–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã]",
						value: "–ü–æ—á–∏—Ç–∞—Ç—å [–∫–æ–º–∏–∫—Å](https://www.homestuck.com/story).",
						inline: true
					},
					{
						name: "man <js/py/jda> <–∫–ª–∞—Å—Å/–º–µ—Ç–æ–¥/—Å–æ–±—ã—Ç–∏–µ>",
						value: "RTFM! –î–æ–∫–∏ –¥–ª—è –î–∏—Å–∫–æ—Ä–¥-–±–æ—Ç–æ–≤.",
						inline: true
					},
					{
						name: "–∫–æ–≥–¥–∞ <—á—Ç–æ-—Ç–æ —Å–ª—É—á–∏—Ç—Å—è>",
						value: "–£–∑–Ω–∞–π, –∫–æ–≥–¥–∞ —ç—Ç–æ —Å–ª—É—á–∏—Ç—Å—è!",
						inline: true
					},
					{
						name: "–∂–¥ <–≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º –¥–∞/–Ω–µ—Ç>",
						value: "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º—É–¥—Ä–æ—Å—Ç–∏ [–ñ–µ–ª–µ–∑–Ω–æ–π –î–≤–µ—Ä–∏](https://randomforum.ru/threads/6469/).",
						inline: true
					}
				]
			}
		
			msg.channel.send({embed: helpEmbed})
		}
	},
	Ping: {
		r: /^(–ø–∏–Ω–≥|ping)[.!]?$/,
		f (msg) {
			let pongText = "üèì –ü–æ–Ω–≥!"
			msg.channel.send(pongText)
				.then((pong) => {
					let userTime = msg.createdTimestamp / 1000
					let botTime = pong.createdTimestamp / 1000
					let pongTime = (botTime - userTime).toFixed(3)
					pong.edit(pongText + " " + pongTime + " —Å–µ–∫.")
				})
				.catch(error => console.log(error))
		}
	},
	Img: {
		r: /^(–ø–∏–∫—á–∞|–∏–º–≥|–∫–∞—Ä—Ç–∏–Ω–∫?–∞|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–≥–∞–ª–µ—Ä–µ—è|img|image|pic(ture)?|gallery)[.!,:]?$/,
		v: true,
		async f (msg, args) {
			let argsText = ""
		
			if (args.length > 0) {
				argsText = args.join(",")
				argsText = "?tags=" + encodeURIComponent(argsText)
			}
		
			try {
				let { body: imageInfo } = await got(`${imgDatabaseURL}random/${argsText}`, { json: true })
				if (imageInfo.error) throw Error(imageInfo.error)
			
				let imageExtension = imageInfo.tags.includes("gif") ? "gif" : "png"
				await msg.channel.send({
					embed: {
						color: 0x7486C2,
						author: {
							name: imageInfo.title,
							icon_url: "https://i.imgur.com/5EOhj0z.png",
							url: `https://stilltest.tk/gallery/#${imageInfo.id}`
						},
						description: `–¢–µ–≥–∏: ${imageInfo.tags.join(", ")}`
							+ (imageInfo.date ? `\n–î–∞—Ç–∞: ${imageInfo.date}` : ""),
						image: {
							url: `https://i.imgur.com/${imageInfo.id}.${imageExtension}`
						}
					}
				})
			} catch (err) {
				await msg.react("604015450304806952")
			}
		}
	},
	Send: {
		r: /^(–æ—Ç–ø—Ä–∞–≤(–∏—Ç)?—å|–ø—Ä–µ–¥–ª–æ–∂–∏(—Ç—å)?|–ø—Ä–∏—à–ª–∏|–ø—Ä–∏—Å–ª–∞—Ç—å|send)$/,
		async f (msg, args, msgCommandOriginal) {
			let imageParamsArray = msgCommandOriginal.match(/\S+ (\S+) ([\s\S]+)/)
		
			if (!imageParamsArray) {
				msg.react("üìú")
				msg.channel.send("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–π –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ.")
				return
			}
		
			let startLink = imageParamsArray[1]
		
			let imgurParams
			let discordLink = ""
		
			let imageLink = startLink
			let imageID = ""
		
			if (!imageLink.includes("//i.imgur.com/")) {
				try {
					imgurParams = await s.sendAttachmentToImgur(imageLink)
					if (imgurParams) {
						discordLink = startLink
						imageLink = imgurParams[0]
						imageID = imgurParams[1]
					}
				} catch (err) {
					if (err.statusCode === 400) {
						msg.channel.send("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ò–º–≥—É—Ä—É.")
						return
					}
				}
			} else {
				try {
					imageID = imageLink.match(/\/\/i\.imgur\.com\/(.+)\./)[1]
				} catch (err) {}
			}
		
			let imageDate = ""
			if (discordLink) {
				let ogURLParts = discordLink.split("/")
				let ogImgName = ogURLParts[ogURLParts.length - 1]
				if (ogImgName.match(/\d{4}-\d{2}-\d{2}/)) {
					imageDate = ogImgName.match(/\d{4}-\d{2}-\d{2}/)[0]
				}
		
				discordLink = `<${discordLink}>\n`
			}
		

			let dateRE = /\d{4}[-_\.\/\\]\d{2}[-_\.\/\\]\d{2}/i
			let takenByRE = /(?:(?:—Å–∫—Ä–∏–Ω(?:—à–æ—Ç)? )?—Å–Ω—è—Ç–æ?| by|takenby|from)\s*:?\s*(\S+)/i
			let tagsRE = /(?:tags|—Ç[–µ–∞—ç]–≥–∏)(?:\s+)?:?/i
			
			let imageNote = imageParamsArray[2]
			let customDate = ""
			let takenBy, imageTitle, tagsRaw
			
			try {
				let dateMatch = imageNote.match(dateRE)
				imageNote = imageNote.split(dateMatch[0]).join(" ")
				customDate = dateMatch[0].trim().replace(/[_\.\/\\]/g, "-")
			} catch (err) {}

			try {
				let takenByMatch = imageNote.match(takenByRE)
				imageNote = imageNote.split(takenByMatch[0]).join(" ")
				takenBy = s.trimPunc(takenByMatch[1])
			} catch (err) {}

			try {
				tagsRaw = s.trimPunc(imageNote.split(tagsRE)[1])
			} catch (err) {}

			imageTitle = s.trimPunc(imageNote.split(tagsRE)[0])

			let imageTags = []
			if (tagsRaw) {
				imageTags = tagsRaw.toLowerCase().replace(/^\s+/g, "").split(/[,;\s]+/)
			}
			let tagsToClean = []
			for (let i in imageTags) {
				let minusMatch = imageTags[i].match(/^-(.+)/)
				if (minusMatch) {
					tagsToClean.push(minusMatch[1])
				}
			}
			imageTags.unshift("screenshot", "minecraft")
			for (let i in tagsToClean) {
				s.removeElementsByValue(imageTags, tagsToClean[i], `-${tagsToClean[i]}`)
			}
			let imageTagsText = imageTags.map(x=>'"'+x+'"').join(', ')
		
			let imageJSON = `\`\`\`json\n\t"${imageID}": {\n\t\t"title": "${imageTitle}",\n\t\t"date": "${(imageDate) ? imageDate : customDate}",\n\t\t"takenBy": "${(takenBy) ? takenBy : msg.author.username}",\n\t\t"big": true,\n\t\t"tags": [${imageTagsText}]\n\t},\n\`\`\``
		
			client.channels.get("526441608250392577").send("–û—Ç " + msg.author.tag + ":\n" + discordLink + imageLink + "\n" + imageJSON)
				.then(() => {
					msg.react("üìÆ")
				})
				.catch(error => console.log(error))
		}
	},
	React: {
		r: /^([–øp—Är]|–ø–æ—Å—Ç–∞–≤—å|–æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π|—Ä–µ–∞–∫—Ü–∏—è|react(ion)?)$/,
		f (msg, args) {
			s.autoreact(msg, args, false) // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∫ –Ω–µ–π –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
		}
	},
	EmojiList: {
		r: /^(—ç(–º–æ(–¥[–∂–∑]|–∂)–∏)?|—Å–º–∞–π–ª(–∏–∫–∏|—ã)|emoji(s|list)?)[.!]?$/,
		v: true,
		f (msg, args, msgCommandOriginal, usedArrowButton) {
			let fromWhichServer = client.guilds.get("540145900526501899")
			let askedServer = s.getGuild(args[0])
		
			let goRight = false
			let goLeft = false
			if (args[0] == "+") {
				goRight = true
			} else if (args[0] == "-") {
				goLeft = true
			} else if (askedServer) {
				fromWhichServer = askedServer
			}
		
			if (usedArrowButton && msg.content.match(/\d{17,20}/g)) {
				let prevServer = msg.content.match(/\d{17,20}/g)[0]
				let p = visibleServers.indexOf(prevServer)
				if (p > -1) {
					let n
					if (goRight) {
						n = p + 1
					} else if (goLeft) {
						n = p - 1
					}
					if (n < 0) {
						n = visibleServers.length - 1
					} else if (n >= visibleServers.length) {
						n = 0
					}
		
					fromWhichServer = client.guilds.get(visibleServers[n])
				}
			}
		
			let emServ = fromWhichServer
			if (emServ && emServ.emojis.size) {
				let embed = {
					color: 0xD4A940,
					fields: [
						{
							name: "1-1:",
							value: ""
						}
					]
				}
		
				let i = 0
				let f = 0
				let emojiDesc = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ–¥–∂–∏:\n" + emServ.name + " `" + emServ.id + "`"
				let emojiList = []
		
				let fieldStart = 1
		
				emServ.emojis.forEach(key => {
					let prefix = "<:"
					let postfix = ">" + " `" + key.name + "`"
					if (key.animated) {
						prefix = "<a:"
					}
					if (++i % 10 == 1) {
						prefix = "\n" + prefix
					}
					let emojiInfo = prefix + key.name + ":" + key.id + postfix
					emojiList.push(emojiInfo)
					let emListText = emojiList.join(" ")
		
					if (f >= 6) {
						return
					} else if (emListText.length < 993) {
						embed.fields[f].name = fieldStart + "-" + i + ":"
						embed.fields[f].value = emListText
					} else {
						emojiList = []
						emojiList.push(emojiInfo)
						if (emojiInfo.length < 993) {
							fieldStart = i
							f++
							embed.fields[f] = {}
							embed.fields[f].name = fieldStart + "-" + i + ":"
							embed.fields[f].value = emojiInfo
						}
					}
				})
		
				if (usedArrowButton) {
					msg.edit(emojiDesc, {embed: embed})
				} else {
					msg.channel.send(emojiDesc, {embed: embed})
						.then((msg) => {
							msg.react("‚¨Ö")
								.then(() => {
									msg.react("‚û°")
								})
								.catch(error => console.log(error))
						})
						.catch(error => console.log(error))
				}
			}
		
			return
		}
	},
	Sticker: {
		r: /^(—Å(—Ç–∏–∫–µ—Ä)?|sticker|—ç(–º–æ(–¥[–∂–∑]|–∂)–∏)?–ª–∏–Ω–∫|e(moji)?link)$/,
		v: true,
		f (msg, args) {
			if (!args[0]) {
				msg.react("üìú")
				return
			}
		
			let emoji
		
			if (args[0].match(/^\d+$/g) && client.emojis.get(args[0])) {
				emoji = client.emojis.get(args[0])
			} else {
				let emojiName = s.getEmojiName(args[0])
				let guildName
				let guildCheck
				if (guildCheck = emojiName.match(/^([^:]+)(?::(\S+))$/)) {
					emojiName = guildCheck[1]
					guildName = guildCheck[2]
				}
				emoji = s.findEmoji(emojiName, guildName)
			}
		
			if (!emoji) {
				msg.react("604015450304806952")
				return
			}
		
			msg.channel.send({
				embed: {
					description: `<${emoji.animated ? "a" : ""}:${emoji.name}:${emoji.id}> ‚Äì ${emoji.name}`, 
					image: {
						url: `https://cdn.discordapp.com/emojis/${emoji.id}.${emoji.animated ? "gif" : "png"}`
					}
				}
			})
		}
	},
	Servers: {
		r: /^(—Å–µ—Ä–≤–µ—Ä[–∞—ã]|servers)[.!]?$/,
		f (msg, args) {
			let embed = {
				color: 0x888888,
				description: ""
			}
		
			let showAllServers = false
			if (msg.author.id == OWNER_ID && args[0] == "all") {
				showAllServers = true
			}
		
			let serversArray = []
			let counter = 0
			client.guilds.forEach(key => {
				if (showAllServers || key.emojis.size) {
					counter++
					serversArray.push(key.id + " | " + key.name)
				}
			})
			serversArray.sort((a, b) => {
				return Number(a.split(" | ")[0]) - Number(b.split(" | ")[0])
			})
			embed.description += `\`\`\`${serversArray.join("\n")}\`\`\``
			embed.title = counter + " —Å–µ—Ä–≤–µ—Ä–æ–≤"
		
			if (!showAllServers) {
				embed.title += " —Å —ç–º–æ–¥–∂–∏"
			}
		
			msg.author.send({embed: embed})
				.then(() => {
					s.envelope(msg)
				})
				.catch(error => console.log(error))
		}
	},
	Avatar: {
		r: /^(–∞–≤(–∞—Ç–∞—Ä(–∫–∞)?|–∫?–∞)|ava(tar)?|pfp)[.!]?$/,
		v: true,
		f (msg, args, msgCommandOriginal) {
			let user
			if (args[0] == "random") {
				user = client.users.filter(u => u.avatar).random()
			} else if ( ["sb", "sbot", "—Å–±", "—Å–±–æ—Ç"].includes(args[0]) ) {
				user = client.users.get(BOT_ID)
			} else if (args[0]) {
				let username = s.getSimpleString(msgCommandOriginal.match(/\S+ (.+)/)[1])
				let result
				let usernameId
				// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–π–¥–∏
				if (username.match(/^\d+$/g) && client.users.get(username)) {
					result = client.users.get(username)
				// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–∑—ã–≤–∞–ª–∫—É
				} else if (usernameId = username.match(/<@\!?(\d+)>/)) {
					let userGotById = client.users.get(usernameId[1])
					if (userGotById) {
						result = userGotById
					}
				// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–≥
				} else if (username.split("#")[1]) {
					client.users.forEach(u => {
						if (username == u.tag.toLowerCase()) {
							result = u
						}
					})
				} else {
					let isDisplayNameSuitable = false
					let isDisplayNameCanBeSuitable = false
			
					client.guilds.forEach(guild => {
						guild.members.forEach(member => {
							if (member.user.avatar) {
								if (username == s.getSimpleString(member.displayName)) {
									result = member.user
									isDisplayNameSuitable = true
								} else if (s.getSimpleString(member.displayName).startsWith(username)) {
									if (!isDisplayNameSuitable) {
										result = member.user
										isDisplayNameCanBeSuitable = true
									}
								} else if (member.nickname) {
									if (username == s.getSimpleString(member.user.username)) {
										if (!isDisplayNameSuitable && !isDisplayNameCanBeSuitable) {
											result = member.user
										}
									} else if (s.getSimpleString(member.user.username).startsWith(username)) {
										if (!result && !isDisplayNameSuitable && !isDisplayNameCanBeSuitable) {
											result = member.user
										}
									}
								}
							}
						})
					})		
				}
			
				user = result
			} else {
				user = msg.author
			}
		
			if (!(user && user.avatar)) {
				msg.react("604015450304806952")
				return
			}
		
			let fullSizeLink = user.avatarURL.split("?size=")[0] + "?size=2048"
		
			// k-means clusterization part
			let link = user.avatarURL.split("?size=")[0] + "?size=128"
		
			let dataset = []
			
			try {
				jimp.read(link)
					.then(image => {
						if (image.bitmap.width > 128) {
							image.resize(128,jimp.AUTO)
						}
						
						let startTime = Date.now()
		
						image.scan(0, 0, image.bitmap.width, image.bitmap.height, function(x, y, idx) {
							dataset[idx/4] = [this.bitmap.data[idx + 0], this.bitmap.data[idx + 1], this.bitmap.data[idx + 2]]
		
							if (x == image.bitmap.width - 1 && y == image.bitmap.height - 1) {
								let diff = Date.now() - startTime
		
								let centroids = skmeans(dataset, 10, "kmpp", 100).centroids
								let hsvColors = []
								for (let i = 0; i < centroids.length; i++) {
									hsvColors.push(s.rgb2hsv(centroids[i]))
								}
								hsvColors.sort((a, b) => {
									return (b[1]+0.01)*b[2]*b[2] - (a[1]+0.01)*a[2]*a[2]
								})
		
								let colorRGB = s.hsv2rgb(hsvColors[0])
								let color = colorRGB[0]*256*256 + colorRGB[1]*256 + colorRGB[2]
		
								msg.channel.send({embed: {
									color: color, 
									description: user.tag, 
									image: {
										url: fullSizeLink
									}
								}})
							}
						})
					})
					.catch(err => {
						console.log(err)
						msg.channel.send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
					})
			} catch (err) {
				console.log(err)
			}
		}
	},
	Invite: {
		r: /^(–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ|–∏–Ω–≤–∞–π—Ç|invite)[.!]?$/,
		f (msg) {
			msg.author.send("–¢—ã –º–æ–∂–µ—à—å –ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è –Ω–∞ —Å–≤–æ–π —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏: \n<https://discordapp.com/api/oauth2/authorize?client_id=" + BOT_ID + "&scope=bot&permissions=0>")
				.then(() => {
					s.envelope(msg)
				})
				.catch(error => console.log(error))
		}
	},
	Homestuck: {
		r: /^(hs|—Ö—Å|—Ö–æ—É–º—Å—Ç–∞–∫|homestuck)[.!]?$/,
		v: true,
		async f (msg, args, msgCommandOriginal, usedArrowButton) {
			let page_number
		
			if (args[0]) {
				if (Number(args[0]) >= 1 && Number(args[0]) <= 8130) {
					page_number = args[0]
				} else {
					return
				}
			} else {
				page_number = 1
			}
		
			let page_link = 'https://www.homestuck.com/story/' + page_number
			let comic_number = "hs#" + page_number
			let got_error_already = false
			let embed_color = 0x249E28
		
			let comic_embed = {
				color: embed_color,
				author: {
					url: page_link,
					name: comic_number
				}
			}
		
			try {
				let hs = await got(page_link, {
					headers: {
						"user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:62.0) Gecko/20100101 Firefox/62.0"
					}
				})
		
				let $ = Cheerio.load(hs.body)
		
				let content_container = $('div#content_container')
				let flash_div = $('div#o_flash-container')
		
				// detecting video
				let is_there_video = false
				let yt_link = ""
				let yt_link_code
		
				if (flash_div.length) {
					let yt_raw = flash_div.html().match(/\'youtubeid\', \'(.+)\'/)
					if (yt_raw) {
						yt_link_code = yt_raw[1]
					}
				} else {
					let yt_raw = $('iframe.ar-inner').attr('src')
					if (yt_raw) {
						yt_link_code = yt_raw.match(/embed\/(.+)/)[1]
					}
				}
				if (yt_link_code) {
					yt_link = `https://youtu.be/${yt_link_code}`
					is_there_video = true
				}
		
		
				if (is_there_video) {
					// send title, desc and video link
					s.showHomestuckPage(msg, {}, usedArrowButton, comic_number + "\n" + yt_link)
				} else {
					// getting title
					let comic_title = $('h2.type-hs-header').text()
					if (comic_title && !is_there_video) {
						comic_title = `${comic_title} (${comic_number})`
					} else {
						comic_title = comic_number
					}
					comic_embed.author.name = comic_title
		
					// getting description
					let desc = $('p.type-rg').text().replace(/\ +/g, " ").replace(/^\s+/, "").replace(/\s+$/, "")
					let desc_limit = 2047
					if (desc.length > desc_limit) {
						desc = desc.substring(0, desc_limit) + "‚Ä¶"
					} else if (desc.length == 0) {
						desc = ""
					}
					comic_embed.description = desc
		
					// getting images
					let imgs
					let img_link = ""
					let is_img_from_flash = false
					if (content_container.length) {
						imgs = content_container.find('img.mar-x-auto.disp-bl')
						if (!imgs.length) {
							let imgs_raw = $('div.bg-scratch-mid-green.pad-t-lg').find('img')
							if (imgs_raw.length) {
								imgs = imgs_raw.attr('src')
								is_img_from_flash = true
							}
						}
					} else {
						imgs = $('img.mar-x-auto.disp-bl')
					}
					if (flash_div.length && !imgs.length) {
						let imgs_raw = flash_div.html().match(/\'altimgsrc\', \'(.+)\'/)
						if (imgs_raw) {
							imgs = imgs_raw[1]
							is_img_from_flash = true
						}
					}
					if (imgs.length) {
						// send title, image and desc
						if (is_img_from_flash) {
							img_link = `https://www.homestuck.com${imgs}`
						} else if (imgs.attr('src').startsWith("/")) {
							img_link = `https://www.homestuck.com${imgs.attr('src')}`
						} else {
							img_link = imgs.attr('src')
						}
		
						comic_embed.image = {url: img_link}
					} else {
						// send title and footer
						comic_embed.footer = {text: "It's probably interactive."}
					}
					s.showHomestuckPage(msg, comic_embed, usedArrowButton, "")
				}
			} catch (err) {
				if (err.statusCode === 404) {
					comic_embed.footer = {text: "It's probably missing page."}
					s.showHomestuckPage(msg, comic_embed, usedArrowButton, "")
				}
			}
		}
	},
	SnowflakeTime: {
		r: /^(sftime)[.!]?$/,
		f (msg, args) {
			let totalSFTimes = []
			args.forEach(arg => {
				if (arg.match(/\d{17,20}/)) {
					let totalMatches = arg.match(/\d{17,20}/g)
					for (let i in totalMatches) {
						let d = new Date(1420070400000 + Number(totalMatches[i]) / 4194304)
						if (!d.toJSON) {
							d = new Date(d)
						}
						d.setHours(d.getHours() + 3)
						totalSFTimes.push(`${d.toJSON().split(".")[0].replace(/T/, ' ')} –ú–°–ö`)
					}
				}
			})
			if (totalSFTimes) {
				msg.channel.send(totalSFTimes.join("\n"))
			}
		}
	},
	Stats: {
		r: /^(stats|—Å—Ç–∞—Ç—ã|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–≥–∑|–∞–ø(—Ç–∞–π–º)?|up(time)?)[.!]?$/,
		f (msg) {
			let diff = Date.now() - readyTime
			let tarr = [1000, 60, 60, 24]
			for (let i in tarr) {
				let x = tarr[i]
				tarr[i] = diff % x
				diff = (diff - tarr[i]) / x
			}
			tarr.push(diff)
			tarr.shift()
			let warr = [
				['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
				['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
				['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
				['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'],
			]
			let sarr = []
			for (let i = tarr.length - 1; i >= 0; i--) {
				if (!tarr[i]) {
					continue
				}
				sarr.push(tarr[i] + ' ' + s.pluralize(tarr[i], warr[i]))
			}
			let uptimeResult = "–Ø —Ä–∞–±–æ—Ç–∞—é —É–∂–µ " + sarr.join(', ') + '.'
		
			const statsLines = [
				uptimeResult,
				"",
				"–°–µ—Ä–≤–µ—Ä–æ–≤: " + client.guilds.size,
				"–≠–º–æ–¥–∂–∏: " + client.emojis.size,
				"–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —ç—Ç—É —Å–µ—Å—Å–∏—é: " + requestsCounter
			]
		
			const statsEmbed = {
				color: 0x888888,
				title: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
				description: statsLines.join("\n")
			}
		
			msg.channel.send({embed: statsEmbed})
		}
	},
	When: {
		r: /^(–∫–æ–≥–¥–∞)[.!]?$/,
		v: true,
		f (msg, args, msgCommandOriginal) {
			if (!args[0]) {
				return
			}
		
			let questionOriginal = msgCommandOriginal.match(/\S+ ([\s\S]+)/)[1].replace(/[.!?]+$/, "")
			let question = s.getSimpleString(questionOriginal)
		
			let epochStart = 17999
			let epochEnd = 65573
			let T = epochEnd - epochStart
		
			let days = Math.floor(Math.pow(((s.hashCode(question) % T) / T), 6) * T) + epochStart
			if (question.match(/(–∂–µ–ª–µ–∑–Ω(–∞—è|–æ–π|—É—é) –¥–≤–µ—Ä(—å|–∏)|–∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞|–∞—Ä–º–∞–≥–µ–¥–¥–æ–Ω|–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å)/)) {
				days = epochEnd
			}
		
			let whenEmbed = {
				title: "–ö–æ–≥–¥–∞ " + questionOriginal + "?",
			}
		
			let dateOptions = {year: "numeric", month: "long", day: "numeric"}
			let dateText
		
			if (days == epochStart) {
				dateText = "–°–µ–≥–æ–¥–Ω—è."
			} else if (days == epochStart + 1) {
				dateText = "–ó–∞–≤—Ç—Ä–∞."
			} else if (days > epochEnd - 1000 && days < epochEnd) {
				dateText = "–ù–∏–∫–æ–≥–¥–∞."
			} else if (question == "–∫–æ–≥–¥–∞") {
				dateText = "–¢–æ–≥–¥–∞."
			} else {
				dateText = new Intl.DateTimeFormat("ru", dateOptions).format(new Date(days*86400*1000))
			}
			whenEmbed.description = "üóì " + dateText
		
			msg.channel.send({embed: whenEmbed})
		}
	},
	IronDoor: {
		r: /^(–∂–µ–ª–µ–∑–Ω–∞—è–¥–≤–µ—Ä—å|–∂–¥)[.!]?$/,
		v: true,
		f (msg, args) {
			if (!args[0]) {
				return
			}
		
			let possibleAnswers = [
				"–ë–µ—Å—Å–ø–æ—Ä–Ω–æ.", 
				"–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ, –¥–∞.",
				"–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è.",
				"–ö–æ–Ω–µ—á–Ω–æ.",
		
				"–î—É–º–∞—é, –¥–∞.",
				"–ù–∞–≤–µ—Ä–Ω–æ–µ.",
				"–í–ø–æ–ª–Ω–µ –≤–µ—Ä–æ—è—Ç–Ω–æ.",
				"–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∏ –µ—Å—Ç—å.",
				"–ê —Å–∞–º –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
		
				"–•–ó, –≤–æ–æ–±—â–µ.",
				"–í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ —Å–µ–π—á–∞—Å.",
				"–ù–µ—è—Å–Ω–æ.",
				"–ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
				"–ú–æ–∂–µ—Ç –±—ã—Ç—å.",
				"–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ.",
				"–ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥—É–º–∞—Ç—å —Å–∞–º.",
				"–ß—Ç–æ –∑–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
				"–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å.",
				"–õ—É—á—à–µ –±—ã —Ç–µ–±–µ –Ω–µ –∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º.",
				"–û—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å?",
				"50 –Ω–∞ 50.",
		
				"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ—Ç.",
				"–î–∞ –≤—Ä—è–¥ –ª–∏.",
				"–ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ.",
				"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –æ–∫–æ–ª–æ–Ω—É–ª–µ–≤–∞—è.",
		
				"–ö–æ–Ω–µ—á–Ω–æ, –Ω–µ—Ç.",
				"–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç: \"–Ω–µ—Ç\".",
				"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –Ω—É–ª–µ–≤–∞—è.",
				"–í—Å–µ–ª–µ–Ω–Ω–∞—è —Ç–∞–∫ –Ω–µ –¥—É–º–∞–µ—Ç."
			]
		
			let embed = {
				author: {
					name: s.getRandomElem(possibleAnswers),
					icon_url: "https://i.imgur.com/P8IAywM.png"
				}
			}
		
			msg.channel.send({embed: embed})
		}
	},
	Three: {
		r: /^-?(\d)[.!]?$/,
		f (msg, args, msgCommandOriginal) {
			if (!args[0]) {
				return
			}
		
			let num = parseInt(msgCommandOriginal.split(" ")[0])
		
			if (!num && num !== 0) {
				return
			} else if (num > 7) {
				num = 7
			} else if (num < 1) {
				msg.channel.send("No emoji for you!")
				return
			}
		
			let emojiName = s.getEmojiName(args[0])
			let guildName
			let guildCheck
		
			if (guildCheck = emojiName.match(/^([^:]+)(?::(\S+))$/)) {
				emojiName = guildCheck[1]
				guildName = guildCheck[2]
			}
		
			let emoji = s.findEmoji(emojiName, guildName)
		
			let prefix = "<:"
			let postfix = "> "
			if (emoji.animated) {
				prefix = "<a:"
			}
		
			let e = prefix + emoji.name + ":" + emoji.id + postfix
			
			msg.channel.send(e.repeat(num))
		}
	},
	Rtfm: {
		r: /^(rtfm|man|docs?)[.!]?$/,
		async f (msg, args, msgCommandOriginal) {
			if (!args[0] || !args[1]) {
				msg.channel.send("–£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ, –∫–∞–∫–∏–µ –¥–æ–∫–∏ –≤–∞–º –Ω—É–∂–Ω—ã (js, py, jda) –∏ –∫–∞–∫–æ–π –º–µ—Ç–æ–¥/—Å–æ–±—ã—Ç–∏–µ –∏—â–∏—Ç–µ.")
				return
			}
		
			let lang = args[0]
			let query = msgCommandOriginal.split(" ")[2]
		
			let [, docsClass, docsMethod] = query.match(/^(\w+)(?:\.([\w\.]+))?/)
			docsClass = docsClass[0].toUpperCase() + docsClass.slice(1);
		
			let link
		
			if (["js", "javascript", "node", "nodejs", "discord.js"].includes(lang)) {
				link = `https://discord.js.org/#/docs/main/stable/class/${docsClass}`
				if (docsMethod) link += `?scrollTo=${docsMethod}`
			} else if (["py", "python", "discord.py"].includes(lang)) {
				if (docsClass.toLowerCase() == "commands") {
					link = `https://discordpy.readthedocs.io/en/latest/ext/commands/api.html#discord.ext.commands`
				} else if (docsClass.toLowerCase() == "tasks") {
					link = `https://discordpy.readthedocs.io/en/latest/ext/tasks/index.html#discord.ext.tasks`
				} else {
					link = `https://discordpy.readthedocs.io/en/latest/api.html#discord.${docsClass}`
				}
				if (docsMethod) link += `.${docsMethod}`
			} else if (["java", "jda"].includes(lang)) {
				let queryParts = query.split(".")
				if ( !["annotations", "bot", "core", "client", "webhook"].includes(queryParts[0]) ) {
					queryParts.unshift("core", "events")
				}
				let possibleEvent = queryParts[queryParts.length - 1]
				if (possibleEvent[0] == possibleEvent[0].toUpperCase() || possibleEvent.toLowerCase().endsWith("event")) {
					queryParts[queryParts.length - 1] = possibleEvent[0].toUpperCase() + possibleEvent.slice(1);
				} else {
					queryParts.push("package-summary")
				}
				for (let i = 0; i < queryParts.length - 1; i++) {
					queryParts[i] = queryParts[i].toLowerCase()
				}
		
				link = `https://ci.dv8tion.net/job/JDA/javadoc/net/dv8tion/jda/${queryParts.join("/")}.html`
			}
		
			try {
				await got(link).then(response => {
					let linkPartsPy = link.split("#")
					if (lang == "py" && linkPartsPy[1]) {
						if (!response.body.includes(`id=\"${linkPartsPy[1]}\"`)) throw "NotFoundError"
					} 
				})
				if (lang == "js") {
					await got("https://raw.githubusercontent.com/discordjs/discord.js/docs/stable.json").then(response => {
						if (!response.body.includes(`"path":"src/structures"}},{"name":"${docsClass}"`)) throw "NotFoundError"
						if (docsMethod) {
							if (!response.body.includes(`"path":"src/structures"}},{"name":"${docsMethod}"`)) throw "NotFoundError"
						}
					})
				}
				msg.channel.send(`üìú <${link}>`)
			} catch (err) {
				msg.channel.send(`–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–∞–∫–æ–µ –Ω–µ—Ç...`)
			}
			
		}
	}
}
